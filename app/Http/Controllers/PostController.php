<?php

namespace App\Http\Controllers;

use App\Contracts\CounterContract;
use App\Events\BlogPostCreated;
use App\Http\Requests\StorePost;
use App\Models\BlogPost;
use App\Models\Image;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Storage;

// The methods that laravel has in blogpost policy when we make it with artisan
//[
//    'view' => 'view',
//    'create' => 'create',
//    'store' => 'create',
//    'update' => 'update',
//    'edit' => 'update',
//    'destroy' => 'delete'
//]

class PostController extends Controller
{

    private $counter;
    public function __construct(CounterContract $counter)
    {
       $this->middleware('auth')->only(['create' , 'store' , 'edit' , 'update' , 'destroy']);
       $this->counter = $counter;
    }
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View|\Illuminate\Http\Response
     */

    public function index()
    {
//        DB::connection()->enableQueryLog();
//        $posts = BlogPost::with('comments')->get();
//        foreach($posts as $post) {
//            foreach ($post->commepnts as $comment){
//                echo $comment->content;
//            }
//        }
//        dd(DB::getQueryLog());



        return view('posts.index' , [
            'posts' => BlogPost::latestWithRelations()->get()
        ]);

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\View\Factory|\Illuminate\Contracts\View\View|\Illuminate\Http\Response
     */
    public function create()
    {
        return view('posts.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(StorePost $request)
    {
        $validatedData = $request->validated();
        $validatedData['user_id'] = $request->user()->id;
        $blogPost = BlogPost::create($validatedData);

        if ($request->hasFile('thumbnail')) {
            $path = $request->file('thumbnail')->store('thumbnails');
            $blogPost->image()->save(
                Image::make(['path' => $path])
            );
//            dump($file);
//            dump($file->getClientMimeType());
//            dump($file->getClientOriginalExtension());
        // the $name 1 and $name2 store images with autogenerated names
//            $name1 = dump($file->store('thumbnails'));
//            $name2 = dump(Storage::disk('local')->putFile('thumbnails' , $file));
//            dump(storage::url($name1));
//            dump(storage::disk('public')->url($name2));

//            dump(Storage::putFileAs('thumbnails' , $file, $blogPost->id . '.' . $file->guessExtension()));
//            $name1 =$file->storeAs('thumbnails' , $blogPost->id . '.' . $file->guessExtension());
//            $name2 = Storage::disk('local')->putFileAs('thumbnails' , $file, $blogPost->id . '.' . $file->guessExtension());
//
//            dump(Storage::url($name1));
//            dump(Storage::disk('local')->url($name2));
        }

        event(new BlogPostCreated($blogPost));
        $request->session()->flash('success' , 'Blog post was created.');

        return redirect()->route('posts.show' , ['post' => $blogPost->id]);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(Request $request ,$id)
    {
//        $request->session()->reflash();
//        return view('posts.show' , ['post' => BlogPost::with(['comments' => function($query){
//            return $query->latest();
//        }])->findorFail($id)]);

        // the default scale for time is minutes.
        $blogPost = Cache::tags(['blog-posts'])->remember("blog-post-{$id}" , 60 , function () use($id){
            return BlogPost::with('comments' , 'tags' , 'user' , 'comments.user')->findOrFail($id);
        });

        // we added dependency using dependency injection , so we don't need below line
//        $counter = resolve(Counter::class);

        return view('posts.show' , [
            'post' => $blogPost,
            'counter' => $this->counter->increment("blog-post-{$id}" , ['blog-post'])
            ]);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $post = BlogPost::findOrFail($id);

//        if(Gate::denies('update-post' , $post)){
//            abort(403 , "You can't edit this post");
//        }
        $this->authorize($post);

        return view('posts.edit' , ['post' => $post]);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(StorePost $request, $id)
    {
        $post = BlogPost::findOrFail($id);

//        if(Gate::denies('update-post' , $post)){
//            abort(403 , "You can't edit this post");
//        }
        $this->authorize($post);
        $validatedData = $request->validated();

        $post->fill($validatedData);
        if($request->hasFile('thumbnail')){
            $path = $request->file('thumbnail')->store('thumbnails');
            if($post->image){
                Storage::delete($post->image->path);
                $post->image->path = $path;
                $post->image->save();
            }else{
                $post->image->save(
                    Image::make(['path' => $path])
                );
            }
        }
        $post->save();
        $request->session()->flash('success' , 'Blog post has updated.');

        return redirect()->route('posts.show' , ['post' => $post->id]);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy(Request  $request, $id)
    {

        $post = BlogPost::findOrFail($id);
//        if(Gate::denies('update-post' , $post)){
//            abort(403 , "You can't delete this post");
//        }

        $this->authorize($post);
        $post->delete();

//        dd('gjhkhk');
//        BlogPost::destroy($id);

        $request->session()->flash('success' , 'Post has deleted');

        return redirect()->route('posts.index');

    }
}
